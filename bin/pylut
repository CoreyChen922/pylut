#!/usr/bin/env python

"""pylut

Usage:
  pylut [-hf] [--reverse] [--visualize] [--resize=<size>] [--convert=<type>] [--name=<name>] [--folder=<output_folder>] <file>
  pylut --version

Options:
  -h --help                                     show this help message and exit
  --version                                     show version and exit
  --visualize                                   visualize the LUT
  --reverse                                     reverse the LUT
  -f, --force                                   overwrite files if necessary
  --resize <size>                               rescale lut
  --convert <convert>                           convert to a different LUT format (L3DL, N3DL, RCUBE, FSIDAT)
  --name <name>                                 name to use for saved LUT
  --folder <output_folder>                      set output folder [default: ./]

"""


from docopt import docopt
from pylut import *
import sys

import os


def FullFilePath(outputFolder, name, extension):
  return outputFolder + "/" + name + extension

def TypeToFileExt(toType):
  if toType in ("L3DL", "N3DL"):
    return ".3dl"
  elif toType in "RCUBE":
    return ".cube"
  elif toType in "FSIDAT":
    return ".dat"
  return None


if __name__ == "__main__":

  # Get arguments
  arguments = docopt(__doc__, version='1.0')
  filePath = os.path.expanduser(arguments["<file>"])
  outputFolder = os.path.abspath(os.path.expanduser(arguments["--folder"]))
  name = arguments["--name"]
  resizeSize = arguments["--resize"]
  convertType = arguments["--convert"]
  overwrite = arguments["--force"]
  visualize = arguments["--visualize"]
  reverse = arguments["--reverse"]

  compatibleTypes = ("L3DL", "N3DL", "RCUBE", "FSIDAT")

  # Make sure it's a valid file path
  if not os.path.isfile(filePath):
    raise NameError("Invalid file path.")

  # Make sure we actually have to do something
  if resizeSize is None and convertType is None and not visualize and not reverse:
    exit()

  # Make sure a valid file type is provided
  if convertType is not None and convertType not in compatibleTypes:
    raise NameError(str(convertType) + " is not a valid type to convert the LUT to.")

  # Read the input file
  lut, filetype = LUT.FromFile(filePath)

  # Reverse
  if reverse:
    print "Warning: reverse can take a long time."
    lut = lut.Reverse(True)

  # Visualize
  if visualize:
    lut.Plot()
    exit()

  # Resize
  if resizeSize is not None:
    lut = lut.Resize(int(resizeSize))

  # Convert

  if name is None:
    name = lut.name
  else:
    name = os.path.splitext(name)[0]

  if convertType is None:
    toType = filetype
  else:
    toType = convertType

  if toType in compatibleTypes:
    if os.path.isfile(FullFilePath(outputFolder, name, TypeToFileExt(toType))) and not overwrite:
      exit("File already exists!")
    lut.ToFile(toType, FullFilePath(outputFolder, name, TypeToFileExt(toType)))
